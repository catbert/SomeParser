using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using System.Globalization;

namespace SomeParser.Tokenizer
{
    /// <summary>
    /// Finishes the parsing
    /// </summary>
    class RuleNumber : Rule[TokenizerState]
    {
        
        // priority 5
        public this()
        {
            base(5);
        }
        
        // is applicable if char is digit
        public override IsApplicable(engine : RuleEngine[TokenizerState]) : bool
        {
            engine.Data.RemainingText[0] >= '0' && engine.Data.RemainingText[0] <= '9'
            //Char.IsDigit(engine.Data.RemainingText[0])
        }
        
        static AllNumberStyles : NumberStyles = NumberStyles.Any;
        static InvariantLocale : CultureInfo = CultureInfo.InvariantCulture;
        
        // applies number rule
        public override Apply(engine : RuleEngine[TokenizerState]) : void
        {
            mutable hasDot = false;
                                
            def (tok, tail) = engine.Data.RemainingText.SplitByChar( c => {
                | '.' => if (hasDot) false else { hasDot = true; true }
                |  c  when char.IsDigit(c) => true
                |  _  => false
            });
            
            engine.Data.Tokens.Add(Token.Number(tok));
            engine.Data.RemainingText = tail;
        }
                
    }
}
