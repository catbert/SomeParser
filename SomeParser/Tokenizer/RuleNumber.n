using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using System.Globalization;

namespace SomeParser.Tokenizer
{
    /// <summary>
    /// Finishes the parsing
    /// </summary>
    class RuleNumber : Rule[TokenizerState]
    {
        
        // priority 5
        public this()
        {
            base(5);
        }
        
        // is applicable if char is sign
        public override IsApplicable(engine : RuleEngine[TokenizerState]) : bool
        {
            def symbol = engine.Data.RemainingText[0];
            def nextSymbol = if (engine.Data.RemainingText.Length > 1) engine.Data.RemainingText[1] else 0 :> char;
            
            match (symbol, nextSymbol)
            {
                | (x, _) when Char.IsDigit(x)
                
                | ('+', '.')
                | ('-', '.') => true
                
                | ('+', x)
                | ('-', x)
                | ('.', x)
                    => Char.IsDigit(x)
                
                | _ => false
            }
        }
        
        static AllNumberStyles : NumberStyles = NumberStyles.Any;
        static InvariantLocale : CultureInfo = CultureInfo.InvariantCulture;
        
        // stops engine
        public override Apply(engine : RuleEngine[TokenizerState]) : void
        {   
            mutable metDigit;
            mutable value;
        
            // split number from all other symbols
            def (tokenSubString, tail) = engine.Data.RemainingText.SplitByString( s => 
            {
                if (metDigit)
                {
                    match (s.Last())
                    {
                        | '+' | '-' | 'e' | 'E' | '.' => true
                        | d when char.IsDigit(d) => metDigit = true; true
                        | _ => false
                    }
                }
                else
                {
                    Decimal.TryParse(s, AllNumberStyles, InvariantLocale, out value);
                }
            });
        }
        
    }
}
